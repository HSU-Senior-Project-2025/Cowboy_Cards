---
description: 
globs: 
alwaysApply: false
---
# SYSTEMATIC DEBUGGING PROTOCOL

> **TL;DR:** When debugging, follow a 4-step process: (1) analyze multiple potential causes, (2) develop 3-5 targeted tests, (3) verify solutions against tests, and (4) maintain a debugging log using the standard template.

## üîç DEBUGGING APPROACH PRINCIPLES

When debugging issues, follow these core principles:

1. **Consider Multiple Causes First** - Never commit to a single explanation prematurely
2. **Test-Driven Diagnosis** - Create tests that fail for the current bug and pass when fixed
3. **Solution Verification** - Verify all solutions against the tests before implementing
4. **Systematic Documentation** - Maintain a comprehensive debugging log

## üìù 4-STEP DEBUGGING PROCESS

### 1Ô∏è‚É£ ANALYZE POTENTIAL CAUSES

For any bug or unexpected behavior:
- Review code and error information carefully
- Write 2-3 short paragraphs discussing potential reasons
- Consider multiple possibilities:
  * Logic errors
  * Incorrect variable states
  * Data type mismatches
  * Environment issues
  * Dependency conflicts
  * Typos
  * Misunderstood requirements
  * Off-by-one errors
  * Race conditions (if applicable)
- Explain reasoning for each possibility based on evidence

### 2Ô∏è‚É£ DEVELOP TARGETED TESTS

Create 3-5 specific tests that:
- **Fail** given the current erroneous code/behavior
- **Pass** only if the specific bug is fixed
- Verify the expected correct output or behavior
- Clearly describe what each test is checking

### 3Ô∏è‚É£ CONCEPTUAL TEST EXECUTION

For each potential solution:
- Mentally (or actually) run it against your defined tests
- A solution is ready to propose only when it passes all tests
- If a solution fails, refine your analysis and approach

### 4Ô∏è‚É£ MAINTAIN DEBUGGING LOG

Throughout the process:
- Use the standard debugging log template (see below)
- Record findings, tests, and attempted solutions
- Update continuously as the debugging progresses

## üìã STANDARD DEBUGGING LOG TEMPLATE

```markdown
### Debugging Session Log

**1. Brief Synopsis:**
* [Summarize the core problem/error being addressed in 1-2 sentences.]

**2. Files & Lines Implicated:**
* [List relevant file(s) and specific line number(s) where the error occurs or potential issues are suspected.]
* Example: `utils.py`, lines 45-52
* Example: Error message points to `main.py`, line 101

**3. Test Cases Written:**
* **Test 1:** [Brief description of what Test 1 checks and its expected outcome.]
* **Test 2:** [Brief description of what Test 2 checks and its expected outcome.]
* **Test 3:** [Brief description of what Test 3 checks and its expected outcome.]
* **Test 4 (Optional):** [Brief description of what Test 4 checks and its expected outcome.]
* **Test 5 (Optional):** [Brief description of what Test 5 checks and its expected outcome.]

**4. Solutions Attempted & Analysis:**
* **Attempt 1:** [Describe the first approach/fix attempted.]
    * *Outcome:* [Did it work? Did it pass the tests? Why or why not?]
    * *Analysis Update:* [Brief note on what this attempt revealed or changed in the analysis.]
* **Attempt 2 (if needed):** [Describe the second approach/fix attempted.]
    * *Outcome:* [Did it work? Did it pass the tests? Why or why not?]
    * *Analysis Update:* [Brief note on what this attempt revealed or changed in the analysis.]
* ... (Add more attempts as necessary)
* **Final Analysis/Proposed Solution:** [If a solution is found, describe it here and explain why it addresses the root cause identified through analysis and testing. If no solution found, summarize the remaining possibilities.]
```

## üö® REQUIRED OUTPUT COMPONENTS

Every debugging response must include:
1. The fully updated debugging log template
2. If high-confidence solution is found:
   - Corrected code snippet(s)
   - Clear explanation of the fix and why it works
3. If issue remains unclear:
   - Analysis and testing results so far
   - Remaining possibilities
   - Information or steps needed to proceed

## üìä DEBUGGING ADAPTATIONS BY COMPLEXITY LEVEL

### Level 1: Quick Bug Fix
- Focus on most likely causes based on error message
- 2-3 targeted tests
- Simple debugging log format

### Level 2-4: More Complex Issues
- Comprehensive multiple-cause analysis
- 3-5 robust tests
- Full debugging log template
- Solution verification against all tests

## ‚úì DEBUGGING VERIFICATION CHECKLIST

Before proposing any solution, verify:
- [ ] Multiple potential causes considered?
- [ ] 3-5 specific tests created?
- [ ] Tests fail with current code?
- [ ] Tests pass with proposed solution?
- [ ] Debugging log template completed?
- [ ] Solution explained clearly with reasoning?

Remember: The goal is not just fixing the immediate issue, but understanding its root cause and preventing similar problems in the future.
