// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createFlashCard = `-- name: CreateFlashCard :exec
INSERT INTO flashcards (front, back, set_id, user_id) VALUES ($1, $2, $3, $4)
`

type CreateFlashCardParams struct {
	Front  string
	Back   string
	SetID  int32
	UserID int32
}

func (q *Queries) CreateFlashCard(ctx context.Context, arg CreateFlashCardParams) error {
	_, err := q.db.Exec(ctx, createFlashCard,
		arg.Front,
		arg.Back,
		arg.SetID,
		arg.UserID,
	)
	return err
}

const getClasses = `-- name: GetClasses :many
SELECT id, name, description, join_code, teacher_id, created_at, updated_at FROM classes
`

func (q *Queries) GetClasses(ctx context.Context) ([]Class, error) {
	rows, err := q.db.Query(ctx, getClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.JoinCode,
			&i.TeacherID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlashCardSet = `-- name: GetFlashCardSet :many
SELECT id, name, description, user_id, class_id, created_at, updated_at FROM flashcard_sets WHERE user_id = $1
`

func (q *Queries) GetFlashCardSet(ctx context.Context, userID int32) ([]FlashcardSet, error) {
	rows, err := q.db.Query(ctx, getFlashCardSet, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlashcardSet
	for rows.Next() {
		var i FlashcardSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.ClassID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
