// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClass = `-- name: CreateClass :exec
INSERT INTO classes (name, description, join_code, teacher_id) VALUES ($1, $2, $3, $4)
`

type CreateClassParams struct {
	Name        string
	Description string
	JoinCode    string
	TeacherID   pgtype.Int4
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) error {
	_, err := q.db.Exec(ctx, createClass,
		arg.Name,
		arg.Description,
		arg.JoinCode,
		arg.TeacherID,
	)
	return err
}

const createFlashCard = `-- name: CreateFlashCard :exec
INSERT INTO flashcards (front, back, set_id) VALUES ($1, $2, $3)
`

type CreateFlashCardParams struct {
	Front string
	Back  string
	SetID int32
}

func (q *Queries) CreateFlashCard(ctx context.Context, arg CreateFlashCardParams) error {
	_, err := q.db.Exec(ctx, createFlashCard, arg.Front, arg.Back, arg.SetID)
	return err
}

const createFlashCardSet = `-- name: CreateFlashCardSet :exec
INSERT INTO flashcard_sets (id, name, description) VALUES ($1, $2, $3)
`

type CreateFlashCardSetParams struct {
	ID          int32
	Name        string
	Description string
}

func (q *Queries) CreateFlashCardSet(ctx context.Context, arg CreateFlashCardSetParams) error {
	_, err := q.db.Exec(ctx, createFlashCardSet, arg.ID, arg.Name, arg.Description)
	return err
}


//const deleteClass = `-- name: DeleteClass :exec
//DELETE FROM classes WHERE id = $1
//`

//func (q *Queries) DeleteClass(ctx context.Context, id int32) error {
//	_, err := q.db.Exec(ctx, deleteClass, id)
//	return err
//}


const createFlashCardSet = `-- name: CreateFlashCardSet :exec
INSERT INTO flashcard_sets (name, description, user_id) VALUES ($1, $2, $3)
`

type CreateFlashCardSetParams struct {
	Name        string
	Description string
	UserID      int32
}

func (q *Queries) CreateFlashCardSet(ctx context.Context, arg CreateFlashCardSetParams) error {
	_, err := q.db.Exec(ctx, createFlashCardSet, arg.Name, arg.Description, arg.UserID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password, first_name, last_name)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, email, password, first_name, last_name, created_at, updated_at
`

type CreateUserParams struct {
	Username  string
	Email     string
	Password  string
	FirstName string
	LastName  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}


const deleteFlashCard = `-- name: DeleteFlashCard :exec
DELETE FROM flashcards WHERE id = $1
`

func (q *Queries) DeleteFlashCard(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFlashCard, id)
	return err
}

const deleteFlashCardSet = `-- name: DeleteFlashCardSet :exec
DELETE FROM flashcard_sets WHERE id = $1
`

func (q *Queries) DeleteFlashCardSet(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFlashCardSet, id)



//	return err
//}

//const deleteUser = `-- name: DeleteUser :exec
//DELETE FROM users WHERE id = $1
//`

//func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
//	_, err := q.db.Exec(ctx, deleteUser, id)


	return err
}

const getClass = `-- name: GetClass :one
SELECT id, name, description, join_code, teacher_id, created_at, updated_at FROM classes WHERE id = $1
`

func (q *Queries) GetClass(ctx context.Context, id int32) (Class, error) {
	row := q.db.QueryRow(ctx, getClass, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.JoinCode,
		&i.TeacherID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClasses = `-- name: GetClasses :many
SELECT id, name, description, join_code, teacher_id, created_at, updated_at FROM classes
`

func (q *Queries) GetClasses(ctx context.Context) ([]Class, error) {
	rows, err := q.db.Query(ctx, getClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.JoinCode,
			&i.TeacherID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlashCard = `-- name: GetFlashCard :one
SELECT id, front, back, set_id, created_at, updated_at FROM flashcards WHERE id = $1
`

func (q *Queries) GetFlashCard(ctx context.Context, id int32) (Flashcard, error) {
	row := q.db.QueryRow(ctx, getFlashCard, id)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.Front,
		&i.Back,
		&i.SetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFlashCardSet = `-- name: GetFlashCardSet :one
SELECT id, name, description, created_at, updated_at FROM flashcard_sets WHERE id = $1
`

func (q *Queries) GetFlashCardSet(ctx context.Context, id int32) (FlashcardSet, error) {
	row := q.db.QueryRow(ctx, getFlashCardSet, id)
	var i FlashcardSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, first_name, last_name, email, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, first_name, last_name, created_at, updated_at 
FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, first_name, last_name, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password, first_name, last_name, created_at, updated_at 
FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, first_name, last_name, email, password, created_at, updated_at FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClass = `-- name: UpdateClass :exec
UPDATE classes SET name = $1, description = $2, join_code = $3, teacher_id = $4 WHERE id = $5
`

type UpdateClassParams struct {
	Name        string
	Description string
	JoinCode    string
	TeacherID   pgtype.Int4
	ID          int32
}

func (q *Queries) UpdateClass(ctx context.Context, arg UpdateClassParams) error {
	_, err := q.db.Exec(ctx, updateClass,
		arg.Name,
		arg.Description,
		arg.JoinCode,
		arg.TeacherID,
		arg.ID,
	)
	return err
}

const updateFlashCard = `-- name: UpdateFlashCard :exec
UPDATE flashcards SET front = $1, back = $2 WHERE id = $3
`

type UpdateFlashCardParams struct {
	Front string
	Back  string
	ID    int32
}

func (q *Queries) UpdateFlashCard(ctx context.Context, arg UpdateFlashCardParams) error {
	_, err := q.db.Exec(ctx, updateFlashCard, arg.Front, arg.Back, arg.ID)
	return err
}

const updateFlashCardSet = `-- name: UpdateFlashCardSet :exec
UPDATE flashcard_sets SET name = $1, description = $2 WHERE id = $3
`

type UpdateFlashCardSetParams struct {
	Name        string
	Description string
	ID          int32
}

func (q *Queries) UpdateFlashCardSet(ctx context.Context, arg UpdateFlashCardSetParams) error {
	_, err := q.db.Exec(ctx, updateFlashCardSet, arg.Name, arg.Description, arg.ID)
	return err
}


const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET username = $1, 
    email = $2, 
    first_name = $3, 
    last_name = $4, 
    updated_at = NOW() 
WHERE id = $5
`

type UpdateUserParams struct {
	Username  string
	Email     string
	FirstName string
	LastName  string
	ID        int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.ID,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = $1, updated_at = NOW() WHERE id = $2
`

type UpdateUserPasswordParams struct {
	Password string
	ID       int32
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}

