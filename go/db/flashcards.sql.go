// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: flashcards.sql

package db

import (
	"context"
)

const createFlashcard = `-- name: CreateFlashcard :one
INSERT INTO flashcards (front, back, set_id) VALUES ($1, $2, $3) RETURNING id, front, back, set_id, created_at, updated_at
`

type CreateFlashcardParams struct {
	Front string
	Back  string
	SetID int32
}

func (q *Queries) CreateFlashcard(ctx context.Context, arg CreateFlashcardParams) (Flashcard, error) {
	row := q.db.QueryRow(ctx, createFlashcard, arg.Front, arg.Back, arg.SetID)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.Front,
		&i.Back,
		&i.SetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFlashcard = `-- name: DeleteFlashcard :exec
DELETE FROM flashcards WHERE id = $1
`

func (q *Queries) DeleteFlashcard(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFlashcard, id)
	return err
}

const getFlashcardById = `-- name: GetFlashcardById :one
SELECT id, front, back, set_id, created_at, updated_at FROM flashcards WHERE id = $1
`

func (q *Queries) GetFlashcardById(ctx context.Context, id int32) (Flashcard, error) {
	row := q.db.QueryRow(ctx, getFlashcardById, id)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.Front,
		&i.Back,
		&i.SetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFlashcardsOfASet = `-- name: ListFlashcardsOfASet :many
SELECT id, front, back, set_id, created_at, updated_at FROM flashcards WHERE set_id = $1
`

func (q *Queries) ListFlashcardsOfASet(ctx context.Context, setID int32) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, listFlashcardsOfASet, setID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.Front,
			&i.Back,
			&i.SetID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFlashcardBack = `-- name: UpdateFlashcardBack :one
UPDATE flashcards SET back = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2 RETURNING back
`

type UpdateFlashcardBackParams struct {
	Back string
	ID   int32
}

func (q *Queries) UpdateFlashcardBack(ctx context.Context, arg UpdateFlashcardBackParams) (string, error) {
	row := q.db.QueryRow(ctx, updateFlashcardBack, arg.Back, arg.ID)
	var back string
	err := row.Scan(&back)
	return back, err
}

const updateFlashcardFront = `-- name: UpdateFlashcardFront :one
UPDATE flashcards SET front = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2 RETURNING front
`

type UpdateFlashcardFrontParams struct {
	Front string
	ID    int32
}

func (q *Queries) UpdateFlashcardFront(ctx context.Context, arg UpdateFlashcardFrontParams) (string, error) {
	row := q.db.QueryRow(ctx, updateFlashcardFront, arg.Front, arg.ID)
	var front string
	err := row.Scan(&front)
	return front, err
}

const updateFlashcardSetId = `-- name: UpdateFlashcardSetId :one
UPDATE flashcards SET set_id = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2 RETURNING set_id
`

type UpdateFlashcardSetIdParams struct {
	SetID int32
	ID    int32
}

func (q *Queries) UpdateFlashcardSetId(ctx context.Context, arg UpdateFlashcardSetIdParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateFlashcardSetId, arg.SetID, arg.ID)
	var set_id int32
	err := row.Scan(&set_id)
	return set_id, err
}

const verifyFlashcardOwner = `-- name: VerifyFlashcardOwner :one
SELECT user_id, set_id, role, set_score from set_user WHERE user_id = $1 AND set_id = (SELECT set_id FROM flashcards WHERE id = $2) AND role = 'owner'
`

type VerifyFlashcardOwnerParams struct {
	UserID int32
	ID     int32
}

func (q *Queries) VerifyFlashcardOwner(ctx context.Context, arg VerifyFlashcardOwnerParams) (SetUser, error) {
	row := q.db.QueryRow(ctx, verifyFlashcardOwner, arg.UserID, arg.ID)
	var i SetUser
	err := row.Scan(
		&i.UserID,
		&i.SetID,
		&i.Role,
		&i.SetScore,
	)
	return i, err
}
