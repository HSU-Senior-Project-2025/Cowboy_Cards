// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: class_set.sql

package db

import (
	"context"
)

const addSetToClass = `-- name: AddSetToClass :exec
INSERT INTO class_set (class_id,set_id) VALUES ($1, $2)
`

type AddSetToClassParams struct {
	ClassID int32
	SetID   int32
}

func (q *Queries) AddSetToClass(ctx context.Context, arg AddSetToClassParams) error {
	_, err := q.db.Exec(ctx, addSetToClass, arg.ClassID, arg.SetID)
	return err
}

const listClassesHavingSet = `-- name: ListClassesHavingSet :many
SELECT classes.id, class_name, class_description FROM classes
JOIN class_set ON classes.id = class_set.class_id 
JOIN flashcard_sets ON class_set.set_id = flashcard_sets.id
WHERE set_id = $1 ORDER BY class_name
`

type ListClassesHavingSetRow struct {
	ID               int32
	ClassName        string
	ClassDescription string
}

func (q *Queries) ListClassesHavingSet(ctx context.Context, setID int32) ([]ListClassesHavingSetRow, error) {
	rows, err := q.db.Query(ctx, listClassesHavingSet, setID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClassesHavingSetRow
	for rows.Next() {
		var i ListClassesHavingSetRow
		if err := rows.Scan(&i.ID, &i.ClassName, &i.ClassDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSetsInClass = `-- name: ListSetsInClass :many
SELECT flashcard_sets.id, set_name, set_description FROM flashcard_sets 
JOIN class_set ON flashcard_sets.id = class_set.set_id 
JOIN classes ON class_set.class_id = classes.id
WHERE class_id = $1 ORDER BY set_name
`

type ListSetsInClassRow struct {
	ID             int32
	SetName        string
	SetDescription string
}

func (q *Queries) ListSetsInClass(ctx context.Context, classID int32) ([]ListSetsInClassRow, error) {
	rows, err := q.db.Query(ctx, listSetsInClass, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSetsInClassRow
	for rows.Next() {
		var i ListSetsInClassRow
		if err := rows.Scan(&i.ID, &i.SetName, &i.SetDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSetFromClass = `-- name: RemoveSetFromClass :exec
DELETE FROM class_set WHERE class_id = $1 AND set_id = $2
`

type RemoveSetFromClassParams struct {
	ClassID int32
	SetID   int32
}

func (q *Queries) RemoveSetFromClass(ctx context.Context, arg RemoveSetFromClassParams) error {
	_, err := q.db.Exec(ctx, removeSetFromClass, arg.ClassID, arg.SetID)
	return err
}
