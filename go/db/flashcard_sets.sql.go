// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: flashcard_sets.sql

package db

import (
	"context"
)

const createFlashcardSet = `-- name: CreateFlashcardSet :exec
INSERT INTO flashcard_sets (name, description) VALUES ($1, $2)
`

type CreateFlashcardSetParams struct {
	Name        string
	Description string
}

func (q *Queries) CreateFlashcardSet(ctx context.Context, arg CreateFlashcardSetParams) error {
	_, err := q.db.Exec(ctx, createFlashcardSet, arg.Name, arg.Description)
	return err
}

const deleteFlashcardSet = `-- name: DeleteFlashcardSet :exec
DELETE FROM flashcard_sets WHERE id = $1
`

func (q *Queries) DeleteFlashcardSet(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFlashcardSet, id)
	return err
}

const getFlashcardSetById = `-- name: GetFlashcardSetById :one
SELECT id, name, description, created_at, updated_at FROM flashcard_sets WHERE id = $1
`

func (q *Queries) GetFlashcardSetById(ctx context.Context, id int32) (FlashcardSet, error) {
	row := q.db.QueryRow(ctx, getFlashcardSetById, id)
	var i FlashcardSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFlashcardSetDescription = `-- name: UpdateFlashcardSetDescription :one
UPDATE flashcard_sets SET description = $1, updated_at = NOW() WHERE id = $2 RETURNING description
`

type UpdateFlashcardSetDescriptionParams struct {
	Description string
	ID          int32
}

func (q *Queries) UpdateFlashcardSetDescription(ctx context.Context, arg UpdateFlashcardSetDescriptionParams) (string, error) {
	row := q.db.QueryRow(ctx, updateFlashcardSetDescription, arg.Description, arg.ID)
	var description string
	err := row.Scan(&description)
	return description, err
}

const updateFlashcardSetName = `-- name: UpdateFlashcardSetName :one
UPDATE flashcard_sets SET name = $1, updated_at = NOW() WHERE id = $2 RETURNING name
`

type UpdateFlashcardSetNameParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateFlashcardSetName(ctx context.Context, arg UpdateFlashcardSetNameParams) (string, error) {
	row := q.db.QueryRow(ctx, updateFlashcardSetName, arg.Name, arg.ID)
	var name string
	err := row.Scan(&name)
	return name, err
}
