// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: flashcard_sets.sql

package db

import (
	"context"
)

const createFlashcardSet = `-- name: CreateFlashcardSet :one
INSERT INTO flashcard_sets (set_name, set_description) VALUES ($1, $2) RETURNING id, set_name, set_description, created_at, updated_at
`

type CreateFlashcardSetParams struct {
	SetName        string
	SetDescription string
}

func (q *Queries) CreateFlashcardSet(ctx context.Context, arg CreateFlashcardSetParams) (FlashcardSet, error) {
	row := q.db.QueryRow(ctx, createFlashcardSet, arg.SetName, arg.SetDescription)
	var i FlashcardSet
	err := row.Scan(
		&i.ID,
		&i.SetName,
		&i.SetDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFlashcardSet = `-- name: DeleteFlashcardSet :exec
DELETE FROM flashcard_sets WHERE id = $1
`

func (q *Queries) DeleteFlashcardSet(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFlashcardSet, id)
	return err
}

const getFlashcardSetById = `-- name: GetFlashcardSetById :one
SELECT id, set_name, set_description, created_at, updated_at FROM flashcard_sets WHERE id = $1
`

func (q *Queries) GetFlashcardSetById(ctx context.Context, id int32) (FlashcardSet, error) {
	row := q.db.QueryRow(ctx, getFlashcardSetById, id)
	var i FlashcardSet
	err := row.Scan(
		&i.ID,
		&i.SetName,
		&i.SetDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFlashcardSets = `-- name: ListFlashcardSets :many
SELECT id, set_name, set_description, created_at, updated_at FROM flashcard_sets ORDER BY set_name
`

func (q *Queries) ListFlashcardSets(ctx context.Context) ([]FlashcardSet, error) {
	rows, err := q.db.Query(ctx, listFlashcardSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlashcardSet
	for rows.Next() {
		var i FlashcardSet
		if err := rows.Scan(
			&i.ID,
			&i.SetName,
			&i.SetDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFlashcardSetDescription = `-- name: UpdateFlashcardSetDescription :one
UPDATE flashcard_sets SET set_description = $1, updated_at = NOW() WHERE id = $2 RETURNING set_description
`

type UpdateFlashcardSetDescriptionParams struct {
	SetDescription string
	ID             int32
}

func (q *Queries) UpdateFlashcardSetDescription(ctx context.Context, arg UpdateFlashcardSetDescriptionParams) (string, error) {
	row := q.db.QueryRow(ctx, updateFlashcardSetDescription, arg.SetDescription, arg.ID)
	var set_description string
	err := row.Scan(&set_description)
	return set_description, err
}

const updateFlashcardSetName = `-- name: UpdateFlashcardSetName :one
UPDATE flashcard_sets SET set_name = $1, updated_at = NOW() WHERE id = $2 RETURNING set_name
`

type UpdateFlashcardSetNameParams struct {
	SetName string
	ID      int32
}

func (q *Queries) UpdateFlashcardSetName(ctx context.Context, arg UpdateFlashcardSetNameParams) (string, error) {
	row := q.db.QueryRow(ctx, updateFlashcardSetName, arg.SetName, arg.ID)
	var set_name string
	err := row.Scan(&set_name)
	return set_name, err
}
