// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: classes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClass = `-- name: CreateClass :exec
INSERT INTO classes (name, description, join_code, teacher_id) VALUES ($1, $2, $3, $4)
`

type CreateClassParams struct {
	Name        string
	Description string
	JoinCode    string
	TeacherID   pgtype.Int4
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) error {
	_, err := q.db.Exec(ctx, createClass,
		arg.Name,
		arg.Description,
		arg.JoinCode,
		arg.TeacherID,
	)
	return err
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM classes WHERE id = $1
`

func (q *Queries) DeleteClass(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteClass, id)
	return err
}

const getClassById = `-- name: GetClassById :one
SELECT id, name, description, join_code, teacher_id, created_at, updated_at FROM classes WHERE id = $1
`

func (q *Queries) GetClassById(ctx context.Context, id int32) (Class, error) {
	row := q.db.QueryRow(ctx, getClassById, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.JoinCode,
		&i.TeacherID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClasses = `-- name: ListClasses :many
SELECT id, name, description, join_code, teacher_id, created_at, updated_at FROM classes ORDER BY name
`

func (q *Queries) ListClasses(ctx context.Context) ([]Class, error) {
	rows, err := q.db.Query(ctx, listClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.JoinCode,
			&i.TeacherID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClassDescription = `-- name: UpdateClassDescription :one
UPDATE classes SET description = $1, updated_at = NOW() WHERE id = $2 RETURNING description
`

type UpdateClassDescriptionParams struct {
	Description string
	ID          int32
}

func (q *Queries) UpdateClassDescription(ctx context.Context, arg UpdateClassDescriptionParams) (string, error) {
	row := q.db.QueryRow(ctx, updateClassDescription, arg.Description, arg.ID)
	var description string
	err := row.Scan(&description)
	return description, err
}

const updateClassName = `-- name: UpdateClassName :one
UPDATE classes SET name = $1, updated_at = NOW() WHERE id = $2 RETURNING name
`

type UpdateClassNameParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateClassName(ctx context.Context, arg UpdateClassNameParams) (string, error) {
	row := q.db.QueryRow(ctx, updateClassName, arg.Name, arg.ID)
	var name string
	err := row.Scan(&name)
	return name, err
}

const updateClassTeacherId = `-- name: UpdateClassTeacherId :one
UPDATE classes SET teacher_id = $1, updated_at = NOW() WHERE id = $2 RETURNING teacher_id
`

type UpdateClassTeacherIdParams struct {
	TeacherID pgtype.Int4
	ID        int32
}

func (q *Queries) UpdateClassTeacherId(ctx context.Context, arg UpdateClassTeacherIdParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, updateClassTeacherId, arg.TeacherID, arg.ID)
	var teacher_id pgtype.Int4
	err := row.Scan(&teacher_id)
	return teacher_id, err
}
