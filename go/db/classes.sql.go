// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: classes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClass = `-- name: CreateClass :one
INSERT INTO classes (class_name, class_description, join_code) VALUES ($1, $2, $3) RETURNING id, class_name, class_description, join_code, created_at, updated_at
`

type CreateClassParams struct {
	ClassName        string
	ClassDescription string
	JoinCode         pgtype.Text
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) (Class, error) {
	row := q.db.QueryRow(ctx, createClass, arg.ClassName, arg.ClassDescription, arg.JoinCode)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.ClassName,
		&i.ClassDescription,
		&i.JoinCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM classes WHERE id = $1
`

func (q *Queries) DeleteClass(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteClass, id)
	return err
}

const getClassById = `-- name: GetClassById :one
SELECT id, class_name, class_description, join_code, created_at, updated_at FROM classes WHERE id = $1
`

func (q *Queries) GetClassById(ctx context.Context, id int32) (Class, error) {
	row := q.db.QueryRow(ctx, getClassById, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.ClassName,
		&i.ClassDescription,
		&i.JoinCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClassScores = `-- name: GetClassScores :many
SELECT class_user.user_id, users.username, SUM(set_score) AS class_score FROM classes 
JOIN class_user ON classes.id = class_user.class_id 
JOIN class_set ON classes.id = class_set.class_id
JOIN set_user ON (class_user.user_id = set_user.user_id AND class_set.set_id = set_user.set_id)
JOIN users ON class_user.user_id = users.id
WHERE classes.id = $1
GROUP BY class_user.user_id, users.username
ORDER BY SUM(set_score) DESC
`

type GetClassScoresRow struct {
	UserID     int32
	Username   string
	ClassScore int64
}

func (q *Queries) GetClassScores(ctx context.Context, id int32) ([]GetClassScoresRow, error) {
	rows, err := q.db.Query(ctx, getClassScores, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClassScoresRow
	for rows.Next() {
		var i GetClassScoresRow
		if err := rows.Scan(&i.UserID, &i.Username, &i.ClassScore); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClasses = `-- name: ListClasses :many
SELECT id, class_name, class_description, join_code, created_at, updated_at FROM classes ORDER BY class_name
`

func (q *Queries) ListClasses(ctx context.Context) ([]Class, error) {
	rows, err := q.db.Query(ctx, listClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.ClassName,
			&i.ClassDescription,
			&i.JoinCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClassDescription = `-- name: UpdateClassDescription :one
UPDATE classes SET class_description = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2 RETURNING class_description
`

type UpdateClassDescriptionParams struct {
	ClassDescription string
	ID               int32
}

func (q *Queries) UpdateClassDescription(ctx context.Context, arg UpdateClassDescriptionParams) (string, error) {
	row := q.db.QueryRow(ctx, updateClassDescription, arg.ClassDescription, arg.ID)
	var class_description string
	err := row.Scan(&class_description)
	return class_description, err
}

const updateClassName = `-- name: UpdateClassName :one
UPDATE classes SET class_name = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2 RETURNING class_name
`

type UpdateClassNameParams struct {
	ClassName string
	ID        int32
}

func (q *Queries) UpdateClassName(ctx context.Context, arg UpdateClassNameParams) (string, error) {
	row := q.db.QueryRow(ctx, updateClassName, arg.ClassName, arg.ID)
	var class_name string
	err := row.Scan(&class_name)
	return class_name, err
}

const verifyClassMember = `-- name: VerifyClassMember :one
SELECT user_id, class_id, role FROM class_user WHERE class_id = $1 AND user_id = $2
`

type VerifyClassMemberParams struct {
	ClassID int32
	UserID  int32
}

func (q *Queries) VerifyClassMember(ctx context.Context, arg VerifyClassMemberParams) (ClassUser, error) {
	row := q.db.QueryRow(ctx, verifyClassMember, arg.ClassID, arg.UserID)
	var i ClassUser
	err := row.Scan(&i.UserID, &i.ClassID, &i.Role)
	return i, err
}
