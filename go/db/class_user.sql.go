// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: class_user.sql

package db

import (
	"context"
)

const joinClass = `-- name: JoinClass :exec
INSERT INTO class_user (user_id, class_id, role) VALUES ($1, $2, $3)
`

type JoinClassParams struct {
	UserID  int32
	ClassID int32
	Role    string
}

func (q *Queries) JoinClass(ctx context.Context, arg JoinClassParams) error {
	_, err := q.db.Exec(ctx, joinClass, arg.UserID, arg.ClassID, arg.Role)
	return err
}

const leaveClass = `-- name: LeaveClass :exec
DELETE FROM class_user WHERE user_id = $1 AND class_id = $2
`

type LeaveClassParams struct {
	UserID  int32
	ClassID int32
}

func (q *Queries) LeaveClass(ctx context.Context, arg LeaveClassParams) error {
	_, err := q.db.Exec(ctx, leaveClass, arg.UserID, arg.ClassID)
	return err
}

const listClassesOfAUser = `-- name: ListClassesOfAUser :many
SELECT class_id, role, class_name, class_description FROM class_user JOIN classes ON class_user.class_id = classes.id WHERE user_id = $1 ORDER BY class_name
`

type ListClassesOfAUserRow struct {
	ClassID          int32
	Role             string
	ClassName        string
	ClassDescription string
}

func (q *Queries) ListClassesOfAUser(ctx context.Context, userID int32) ([]ListClassesOfAUserRow, error) {
	rows, err := q.db.Query(ctx, listClassesOfAUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClassesOfAUserRow
	for rows.Next() {
		var i ListClassesOfAUserRow
		if err := rows.Scan(
			&i.ClassID,
			&i.Role,
			&i.ClassName,
			&i.ClassDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMembersOfAClass = `-- name: ListMembersOfAClass :many
SELECT user_id, class_id, role, first_name, last_name, username FROM class_user JOIN users ON class_user.user_id = users.id WHERE class_id = $1 ORDER BY last_name, first_name
`

type ListMembersOfAClassRow struct {
	UserID    int32
	ClassID   int32
	Role      string
	FirstName string
	LastName  string
	Username  string
}

func (q *Queries) ListMembersOfAClass(ctx context.Context, classID int32) ([]ListMembersOfAClassRow, error) {
	rows, err := q.db.Query(ctx, listMembersOfAClass, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMembersOfAClassRow
	for rows.Next() {
		var i ListMembersOfAClassRow
		if err := rows.Scan(
			&i.UserID,
			&i.ClassID,
			&i.Role,
			&i.FirstName,
			&i.LastName,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
