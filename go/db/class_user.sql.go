// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: class_user.sql

package db

import (
	"context"
)

const getClassesOfAUser = `-- name: GetClassesOfAUser :many
SELECT class_id, role, name FROM class_user JOIN classes ON class_user.class_id = classes.id
WHERE user_id = $1
`

type GetClassesOfAUserRow struct {
	ClassID int32
	Role    string
	Name    string
}

func (q *Queries) GetClassesOfAUser(ctx context.Context, userID int32) ([]GetClassesOfAUserRow, error) {
	rows, err := q.db.Query(ctx, getClassesOfAUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClassesOfAUserRow
	for rows.Next() {
		var i GetClassesOfAUserRow
		if err := rows.Scan(&i.ClassID, &i.Role, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembersOfAClass = `-- name: GetMembersOfAClass :many
SELECT user_id, class_id, role, first_name, last_name
FROM class_user JOIN users ON class_user.user_id = users.id
WHERE class_id = $1
`

type GetMembersOfAClassRow struct {
	UserID    int32
	ClassID   int32
	Role      string
	FirstName string
	LastName  string
}

func (q *Queries) GetMembersOfAClass(ctx context.Context, classID int32) ([]GetMembersOfAClassRow, error) {
	rows, err := q.db.Query(ctx, getMembersOfAClass, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMembersOfAClassRow
	for rows.Next() {
		var i GetMembersOfAClassRow
		if err := rows.Scan(
			&i.UserID,
			&i.ClassID,
			&i.Role,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentsOfAClass = `-- name: GetStudentsOfAClass :many
SELECT user_id, class_id, role, first_name, last_name
FROM class_user JOIN users ON class_user.user_id = users.id
WHERE class_id = $1 AND role = 'Student'
`

type GetStudentsOfAClassRow struct {
	UserID    int32
	ClassID   int32
	Role      string
	FirstName string
	LastName  string
}

func (q *Queries) GetStudentsOfAClass(ctx context.Context, classID int32) ([]GetStudentsOfAClassRow, error) {
	rows, err := q.db.Query(ctx, getStudentsOfAClass, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentsOfAClassRow
	for rows.Next() {
		var i GetStudentsOfAClassRow
		if err := rows.Scan(
			&i.UserID,
			&i.ClassID,
			&i.Role,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const joinClass = `-- name: JoinClass :exec
INSERT INTO class_user (user_id, class_id, role) VALUES ($1, $2, $3)
`

type JoinClassParams struct {
	UserID  int32
	ClassID int32
	Role    string
}

func (q *Queries) JoinClass(ctx context.Context, arg JoinClassParams) error {
	_, err := q.db.Exec(ctx, joinClass, arg.UserID, arg.ClassID, arg.Role)
	return err
}

const leaveClass = `-- name: LeaveClass :exec
DELETE FROM class_user WHERE user_id = $1 AND class_id = $2
`

type LeaveClassParams struct {
	UserID  int32
	ClassID int32
}

func (q *Queries) LeaveClass(ctx context.Context, arg LeaveClassParams) error {
	_, err := q.db.Exec(ctx, leaveClass, arg.UserID, arg.ClassID)
	return err
}
