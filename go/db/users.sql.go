// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, first_name, last_name, email, password) VALUES ($1, $2, $3, $4, $5) RETURNING id, username, first_name, last_name, email, password, last_login, login_streak, created_at, updated_at
`

type CreateUserParams struct {
	Username  string
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.LastLogin,
		&i.LoginStreak,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, first_name, last_name, email, password, last_login, login_streak, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.LastLogin,
		&i.LoginStreak,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, first_name, last_name, email, login_streak, created_at, updated_at FROM users WHERE id = $1
`

type GetUserByIdRow struct {
	ID          int32
	Username    string
	FirstName   string
	LastName    string
	Email       string
	LoginStreak int32
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.LoginStreak,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, first_name, last_name, email, created_at, updated_at FROM users WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID        int32
	Username  string
	FirstName string
	LastName  string
	Email     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, first_name, last_name, email, created_at, updated_at FROM users ORDER BY last_name, first_name
`

type ListUsersRow struct {
	ID        int32
	Username  string
	FirstName string
	LastName  string
	Email     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE users SET email = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2 RETURNING email
`

type UpdateEmailParams struct {
	Email string
	ID    int32
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (string, error) {
	row := q.db.QueryRow(ctx, updateEmail, arg.Email, arg.ID)
	var email string
	err := row.Scan(&email)
	return email, err
}

const updateFirstname = `-- name: UpdateFirstname :one
UPDATE users SET first_name = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2 RETURNING first_name
`

type UpdateFirstnameParams struct {
	FirstName string
	ID        int32
}

func (q *Queries) UpdateFirstname(ctx context.Context, arg UpdateFirstnameParams) (string, error) {
	row := q.db.QueryRow(ctx, updateFirstname, arg.FirstName, arg.ID)
	var first_name string
	err := row.Scan(&first_name)
	return first_name, err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users SET last_login = CURRENT_DATE, updated_at = LOCALTIMESTAMP(2) WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}

const updateLastname = `-- name: UpdateLastname :one
UPDATE users SET last_name = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2 RETURNING last_name
`

type UpdateLastnameParams struct {
	LastName string
	ID       int32
}

func (q *Queries) UpdateLastname(ctx context.Context, arg UpdateLastnameParams) (string, error) {
	row := q.db.QueryRow(ctx, updateLastname, arg.LastName, arg.ID)
	var last_name string
	err := row.Scan(&last_name)
	return last_name, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users SET password = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2
`

type UpdatePasswordParams struct {
	Password string
	ID       int32
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const updateUsername = `-- name: UpdateUsername :one
UPDATE users SET username = $1, updated_at = LOCALTIMESTAMP(2) WHERE id = $2 RETURNING username
`

type UpdateUsernameParams struct {
	Username string
	ID       int32
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (string, error) {
	row := q.db.QueryRow(ctx, updateUsername, arg.Username, arg.ID)
	var username string
	err := row.Scan(&username)
	return username, err
}
