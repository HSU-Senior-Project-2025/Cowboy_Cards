// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: card_history.sql

package db

import (
	"context"
)

const upsertCorrectFlashcardScore = `-- name: UpsertCorrectFlashcardScore :exec
INSERT INTO card_history (user_id, card_id, score) VALUES ($1, $2, 1) ON CONFLICT (user_id, card_id) DO UPDATE SET score = score + 1, times_attempted = times_attempted + 1
`

type UpsertCorrectFlashcardScoreParams struct {
	UserID int32
	CardID int32
}

func (q *Queries) UpsertCorrectFlashcardScore(ctx context.Context, arg UpsertCorrectFlashcardScoreParams) error {
	_, err := q.db.Exec(ctx, upsertCorrectFlashcardScore, arg.UserID, arg.CardID)
	return err
}

const upsertIncorrectFlashcardScore = `-- name: UpsertIncorrectFlashcardScore :exec
INSERT INTO card_history (user_id, card_id, score) VALUES ($1, $2, 0) ON CONFLICT (user_id, card_id) DO UPDATE SET times_attempted = times_attempted + 1
`

type UpsertIncorrectFlashcardScoreParams struct {
	UserID int32
	CardID int32
}

func (q *Queries) UpsertIncorrectFlashcardScore(ctx context.Context, arg UpsertIncorrectFlashcardScoreParams) error {
	_, err := q.db.Exec(ctx, upsertIncorrectFlashcardScore, arg.UserID, arg.CardID)
	return err
}
