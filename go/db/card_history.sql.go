// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: card_history.sql

package db

import (
	"context"
)

const getCardScore = `-- name: GetCardScore :one
SELECT score AS correct, (times_attempted - score) AS incorrect, (score - times_attempted) AS net_score, times_attempted FROM card_history
WHERE user_id = $1 AND card_id = $2
`

type GetCardScoreParams struct {
	UserID int32
	CardID int32
}

type GetCardScoreRow struct {
	Correct        int32
	Incorrect      int32
	NetScore       int32
	TimesAttempted int32
}

func (q *Queries) GetCardScore(ctx context.Context, arg GetCardScoreParams) (GetCardScoreRow, error) {
	row := q.db.QueryRow(ctx, getCardScore, arg.UserID, arg.CardID)
	var i GetCardScoreRow
	err := row.Scan(
		&i.Correct,
		&i.Incorrect,
		&i.NetScore,
		&i.TimesAttempted,
	)
	return i, err
}

const getCardsMastered = `-- name: GetCardsMastered :one
SELECT COUNT(is_mastered) FROM card_history WHERE user_id = $1 AND is_mastered = TRUE
`

func (q *Queries) GetCardsMastered(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getCardsMastered, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCardsStudied = `-- name: GetCardsStudied :one
SELECT COUNT(card_id) FROM card_history WHERE user_id = $1
`

func (q *Queries) GetCardsStudied(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getCardsStudied, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getScoresInASet = `-- name: GetScoresInASet :many
SELECT set_name, score AS correct, (times_attempted - score) AS incorrect, score AS net_score, times_attempted 
FROM card_history 
JOIN flashcards ON card_history.card_id = flashcards.id
JOIN flashcard_sets ON flashcards.set_id = flashcard_sets.id WHERE user_id = $1 AND set_id = $2
`

type GetScoresInASetParams struct {
	UserID int32
	SetID  int32
}

type GetScoresInASetRow struct {
	SetName        string
	Correct        int32
	Incorrect      int32
	NetScore       int32
	TimesAttempted int32
}

func (q *Queries) GetScoresInASet(ctx context.Context, arg GetScoresInASetParams) ([]GetScoresInASetRow, error) {
	rows, err := q.db.Query(ctx, getScoresInASet, arg.UserID, arg.SetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScoresInASetRow
	for rows.Next() {
		var i GetScoresInASetRow
		if err := rows.Scan(
			&i.SetName,
			&i.Correct,
			&i.Incorrect,
			&i.NetScore,
			&i.TimesAttempted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalCardViews = `-- name: GetTotalCardViews :one
SELECT COALESCE(SUM(times_attempted), 0) FROM card_history WHERE user_id = $1
`

func (q *Queries) GetTotalCardViews(ctx context.Context, userID int32) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTotalCardViews, userID)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const upsertCorrectFlashcardScore = `-- name: UpsertCorrectFlashcardScore :exec
INSERT INTO card_history (user_id, card_id, score) VALUES ($1, $2, 1) 
ON CONFLICT (user_id, card_id) DO 
UPDATE SET score = card_history.score + 1, times_attempted = card_history.times_attempted + 1
`

type UpsertCorrectFlashcardScoreParams struct {
	UserID int32
	CardID int32
}

func (q *Queries) UpsertCorrectFlashcardScore(ctx context.Context, arg UpsertCorrectFlashcardScoreParams) error {
	_, err := q.db.Exec(ctx, upsertCorrectFlashcardScore, arg.UserID, arg.CardID)
	return err
}

const upsertIncorrectFlashcardScore = `-- name: UpsertIncorrectFlashcardScore :exec
INSERT INTO card_history (user_id, card_id, score) VALUES ($1, $2, 0) 
ON CONFLICT (user_id, card_id) DO 
UPDATE SET times_attempted = card_history.times_attempted + 1
`

type UpsertIncorrectFlashcardScoreParams struct {
	UserID int32
	CardID int32
}

func (q *Queries) UpsertIncorrectFlashcardScore(ctx context.Context, arg UpsertIncorrectFlashcardScoreParams) error {
	_, err := q.db.Exec(ctx, upsertIncorrectFlashcardScore, arg.UserID, arg.CardID)
	return err
}
