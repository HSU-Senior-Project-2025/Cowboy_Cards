// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: set_user.sql

package db

import (
	"context"
)

const joinSet = `-- name: JoinSet :exec
INSERT INTO set_user (user_id, set_id, role) VALUES ($1, $2, $3)
`

type JoinSetParams struct {
	UserID int32
	SetID  int32
	Role   string
}

func (q *Queries) JoinSet(ctx context.Context, arg JoinSetParams) error {
	_, err := q.db.Exec(ctx, joinSet, arg.UserID, arg.SetID, arg.Role)
	return err
}

const leaveSet = `-- name: LeaveSet :exec
DELETE FROM set_user WHERE user_id = $1 AND set_id = $2
`

type LeaveSetParams struct {
	UserID int32
	SetID  int32
}

func (q *Queries) LeaveSet(ctx context.Context, arg LeaveSetParams) error {
	_, err := q.db.Exec(ctx, leaveSet, arg.UserID, arg.SetID)
	return err
}

const listSetsOfAUser = `-- name: ListSetsOfAUser :many
SELECT set_id, role, set_name, set_description FROM set_user JOIN flashcard_sets ON set_user.set_id = flashcard_sets.id WHERE user_id = $1 ORDER BY set_name
`

type ListSetsOfAUserRow struct {
	SetID          int32
	Role           string
	SetName        string
	SetDescription string
}

func (q *Queries) ListSetsOfAUser(ctx context.Context, userID int32) ([]ListSetsOfAUserRow, error) {
	rows, err := q.db.Query(ctx, listSetsOfAUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSetsOfAUserRow
	for rows.Next() {
		var i ListSetsOfAUserRow
		if err := rows.Scan(
			&i.SetID,
			&i.Role,
			&i.SetName,
			&i.SetDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
